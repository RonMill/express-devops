version: '3.8'
services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
  express-devops:
    build: .
    # damit die prod umgebung das nicht bauen muss sondern von dockerhub ziehen kann
    image: herbybrick/express-devops
    environment:
      - PORT=3000
    depends_on: # bewirkt das mongo zuerst startet 
      - mongo

  mongo:
    container_name: mongo
    image: mongo:4.4.4
    volumes:
      - mongo_db:/data/db
  redis:
    container_name: redis
    image: redis:6.2
    environment:
      - REDIS_URL=redis
      - REDIS_PORT=6379
volumes:
 mongo_db:


#devmode: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build
#prodmode: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build --> build damit das image auch neu gebaut wird
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --scale express-devops=2 -V --build
# docker exec -it express-devops-mongo-1 mongo -u "herbert" -p "herbert"
# volumes: bind irgendwas mit punkt und ein pfad auf unserem system --> siehe ./:/app
# anonymes volume /app/node_modules --> named volume mongo_db:/data/db
# mongo db commands: show dbs, use mydbname, db.books.insert({"name": "harry potter"})
