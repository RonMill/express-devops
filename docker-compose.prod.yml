version: '3.8'
services:
  nginx: 
    ports:
      - "80:80"
  express-devops:
    build: 
      context: .
      args: 
        NODE_ENV: production
    environment:
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - NODE_ENV=production
    command: node index.js
    deploy:
      replicas: 8
      restart_policy: 
        condition: any
      update_config:
        parallelism: 2
        delay: 15s
  mongo:
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

# Im Prod Mode werden Änderungen neu von zB github gepulled und mit docker-compose up -d --build neu gebaut 
# allerdings müssen wir ja nicht alles neu bauen mit nacfolgemden befehl kann nur das image neu gebaut werden was auch geändert wurde 
# ``docker-compose up -d --build express-devops`` hat express-devops irgendwelche dependencies kann man die vom neubauen ausschließen mit --no-deps

# auf Dockerhub hochladen docker login --> docker push image --> muss den name in dockerhub haben --> docker image tag express-devops-express-devops herbybrick/express-devops
# wenn ich jetzt Änderungen mache dann mache ich nur noch ein docker-compose -f laksdjfkajsdffkl build --> baut immer alles --> kann auch sagen nur ein spezielles image -->
# docker-compose -f docker-compose.yml -f .\docker-compose.prod.yml build express-devops
# gleiches gilt für docker-compose push --> docker-compose -f docker-compose.yml -f .\docker-compose.prod.yml push --> alles was sich nicht geändert hat wird geskipped
# bei änderung nur ein pull reicht nicht es muss vorher gebaut werden
# auf dem server: docker-compose pull --> wenn private repository muss vorher eingelogged sein